# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dp.job_scheduling as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.binary_search(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.binary_search(bool_0, bool_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.binary_search(none_type_0, none_type_0)


def test_case_3():
    bytes_0 = b'\xe3\x9a\xe2\x89\x840T"_.\x11\xd1'
    job_0 = module_0.Job(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xe3\x9a\xe2\x89\x84\x15\xfe0T"_.\x11\xd1'
    module_0.schedule(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    module_0.schedule(set_0)


def test_case_6():
    none_type_0 = None
    job_0 = module_0.Job(none_type_0, none_type_0, none_type_0)
    set_0 = {job_0}
    var_0 = module_0.schedule(set_0)


def test_case_7():
    bytes_0 = b"\x00\xab\xbb\xa57\xf8"
    job_0 = module_0.Job(bytes_0, bytes_0, bytes_0)
    list_0 = [job_0, job_0]
    var_0 = module_0.schedule(list_0)
    assert var_0 == b"\x00\xab\xbb\xa57\xf8"


def test_case_8():
    bytes_0 = b"7\xe5N\xc3\xf6J\x8a\x84y\xf4,\xb1M\xcd\xfc\xf1\xcaS\xc6\x88"
    job_0 = module_0.Job(bytes_0, bytes_0, bytes_0)
    list_0 = [job_0, job_0, job_0, job_0]
    var_0 = module_0.schedule(list_0)
    assert var_0 == b"7\xe5N\xc3\xf6J\x8a\x84y\xf4,\xb1M\xcd\xfc\xf1\xcaS\xc6\x88"


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"B\x87\x81\xc1\xffYg\xde\x8e\xf0\xf0C\xbe7\x18"
    bytes_1 = b"B\x87\x81w\xffYg\xde\x8e\xf0\xf0C\xbe7\x18"
    job_0 = module_0.Job(bytes_1, bytes_0, bytes_1)
    list_0 = [job_0, job_0]
    var_0 = module_0.schedule(list_0)
    assert var_0 == b"B\x87\x81w\xffYg\xde\x8e\xf0\xf0C\xbe7\x18"
    str_0 = "cE=Z|MQUFQ0.A"
    module_0.binary_search(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -3829
    job_0 = module_0.Job(int_0, int_0, int_0)
    int_1 = -297
    job_1 = module_0.Job(int_0, int_1, job_0)
    dict_0 = {job_1: int_0, job_0: int_0}
    module_0.schedule(dict_0)
