# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.graph.check_bipartite as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\x8fF\x85\xe3\x8cAG4\xf0wD\xda\x8a"
    module_0.check_bipartite(bytes_0)


def test_case_1():
    str_0 = "Q`<6JhkZhE,i\"I'\\6y"
    set_0 = module_0.check_bipartite(str_0)
    assert set_0 is False


def test_case_2():
    str_0 = 'u6!Dne9+"\x0b"\t'
    var_0 = module_0.check_bipartite(str_0)
    assert var_0 is False
    tuple_0 = (var_0, var_0, var_0)
    tuple_1 = (tuple_0,)
    var_1 = module_0.check_bipartite(tuple_1)
    assert var_1 is True


def test_case_3():
    str_0 = 'u6!Dne9+"\x0b"\t'
    bool_0 = False
    tuple_0 = (bool_0, bool_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    var_0 = module_0.check_bipartite(list_0)
    assert var_0 is False


def test_case_4():
    str_0 = 'u6!Dne9+"\x0b"\t'
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.check_bipartite(str_0)
    assert var_0 is False
    tuple_0 = (var_0, var_0, list_0)
    tuple_1 = (tuple_0, var_0, var_0, var_0)
    list_1 = [tuple_0, tuple_1, tuple_1]
    var_1 = module_0.check_bipartite(list_1)
    assert var_1 is True
