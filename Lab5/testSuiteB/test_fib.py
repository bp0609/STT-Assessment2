# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dp.fib as module_0


def test_case_0():
    bool_0 = False
    var_0 = module_0.fib_recursive(bool_0)
    assert var_0 is False
    var_1 = module_0.fib_list(bool_0)
    assert var_1 == 0


def test_case_1():
    float_0 = -593.7138
    with pytest.raises(AssertionError):
        module_0.fib_list(float_0)


def test_case_2():
    bool_0 = False
    var_0 = module_0.fib_recursive(bool_0)
    assert var_0 is False
    var_1 = module_0.fib_recursive(var_0)
    var_2 = module_0.fib_recursive(var_0)
    var_3 = module_0.fib_iter(var_0)
    assert var_3 is False


def test_case_3():
    float_0 = -548.02693
    with pytest.raises(AssertionError):
        module_0.fib_iter(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = 6609 + 388.116348j
    module_0.fib_recursive(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 662
    var_0 = module_0.fib_list(int_0)
    assert (
        var_0
        == 1000766693821696267082337768498385383065850589297301957367076226817577843322750756346753784720794817996857410108648430865488081108308156681
    )
    module_0.fib_recursive(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 1422
    var_0 = module_0.fib_iter(int_0)
    assert (
        var_0
        == 677547010331380501387375871839031788693200118368800799785325448349437360704422553314356581098497491731552543979561063122333311386034133862631047240337711360200258841238031540043055467476857623002050673194628949558217542265944993812463937676615562671898939483140258268363933807473672231068001330536
    )
    module_0.fib_recursive(var_0)


def test_case_7():
    float_0 = -548.02693
    with pytest.raises(AssertionError):
        module_0.fib_recursive(float_0)
