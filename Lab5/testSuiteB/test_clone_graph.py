# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.graph.clone_graph as module_0
import collections.abc as module_1


def test_case_0():
    none_type_0 = None
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_0 = module_0.clone_graph1(undirected_graph_node_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert var_0.label is None
    assert var_0.neighbors == []


def test_case_1():
    bool_0 = False
    var_0 = module_0.clone_graph1(bool_0)
    bool_1 = True
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_1)
    var_1 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert var_1.label is True
    assert var_1.neighbors == []


def test_case_2():
    bytes_0 = b"\x90\x84\xcdL\x96\xf7\x15o\xd7\x0b\x8eW\xc6\x96I\xa6\x97@"
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bytes_0)
    var_0 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert var_0.label == b"\x90\x84\xcdL\x96\xf7\x15o\xd7\x0b\x8eW\xc6\x96I\xa6\x97@"
    assert var_0.neighbors == []


def test_case_3():
    none_type_0 = None
    var_0 = module_0.clone_graph(none_type_0)
    var_1 = module_0.clone_graph2(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_0.clone_graph2(bool_0)
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.clone_graph(set_0)


def test_case_5():
    bool_0 = True
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
    var_0 = undirected_graph_node_0.add_neighbor(bool_0)
    var_1 = undirected_graph_node_0.shallow_copy()
    var_0.__setitem__(var_1, undirected_graph_node_0)


def test_case_7():
    bool_0 = True
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
    var_0 = module_0.dfs(undirected_graph_node_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    items_view_0 = module_1.ItemsView(set_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(items_view_0)
    var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_1 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_1.label).__module__}.{type(var_1.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_1.label) == 0
    assert (
        f"{type(var_1.neighbors).__module__}.{type(var_1.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.neighbors) == 1
    var_2 = items_view_0.__len__()
    bytes_0 = b"\x90\x84\xcdL\x96\xf7\x15o\xd7\x0b\x8eW\xc6\x96I\xa6\x97@"
    var_3 = var_1.__eq__(bytes_0)
    undirected_graph_node_1 = module_0.UndirectedGraphNode(undirected_graph_node_0)
    var_4 = module_0.clone_graph(var_1)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_4.label).__module__}.{type(var_4.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_4.label) == 0
    assert (
        f"{type(var_4.neighbors).__module__}.{type(var_4.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_4.neighbors) == 1
    var_5 = module_0.clone_graph1(var_4)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_5.label).__module__}.{type(var_5.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_5.label) == 0
    assert (
        f"{type(var_5.neighbors).__module__}.{type(var_5.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_5.neighbors) == 1
    var_6 = var_4.add_neighbor(bytes_0)
    assert len(var_4.neighbors) == 2
    var_3.clear()


@pytest.mark.xfail(strict=True)
def test_case_9():
    set_0 = set()
    var_0 = module_0.clone_graph(set_0)
    var_1 = module_0.clone_graph1(set_0)
    var_2 = module_0.clone_graph2(var_1)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(var_2)
    var_3 = undirected_graph_node_0.add_neighbor(var_1)
    module_0.clone_graph(undirected_graph_node_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    set_0 = set()
    items_view_0 = module_1.ItemsView(set_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(items_view_0)
    var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_1 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_1.label).__module__}.{type(var_1.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_1.label) == 0
    assert (
        f"{type(var_1.neighbors).__module__}.{type(var_1.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.neighbors) == 1
    var_2 = items_view_0.__len__()
    var_3 = var_1.__eq__(var_2)
    var_4 = module_0.clone_graph(var_0)
    var_3.add_neighbor(var_2)


@pytest.mark.xfail(strict=True)
def test_case_11():
    set_0 = set()
    items_view_0 = module_1.ItemsView(set_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(items_view_0)
    var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_1 = items_view_0.__len__()
    undirected_graph_node_1 = module_0.UndirectedGraphNode(var_0)
    var_2 = module_0.clone_graph1(undirected_graph_node_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_2.label).__module__}.{type(var_2.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_2.label) == 0
    assert (
        f"{type(var_2.neighbors).__module__}.{type(var_2.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_2.neighbors) == 1
    var_3 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_0.clear()


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_0 = undirected_graph_node_0.add_neighbor(none_type_0)
    module_0.clone_graph2(undirected_graph_node_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    set_0 = set()
    items_view_0 = module_1.ItemsView(set_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(items_view_0)
    var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_1 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_1.label).__module__}.{type(var_1.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_1.label) == 0
    assert (
        f"{type(var_1.neighbors).__module__}.{type(var_1.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.neighbors) == 1
    var_2 = items_view_0.__len__()
    var_3 = var_2.__eq__(var_0)
    undirected_graph_node_1 = module_0.UndirectedGraphNode(var_1)
    assert (
        f"{type(undirected_graph_node_1.label).__module__}.{type(undirected_graph_node_1.label).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    var_4 = module_0.clone_graph(undirected_graph_node_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_4.label).__module__}.{type(var_4.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_4.label) == 0
    assert (
        f"{type(var_4.neighbors).__module__}.{type(var_4.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_4.neighbors) == 1
    var_5 = undirected_graph_node_0.add_neighbor(var_1)
    var_6 = module_0.clone_graph1(undirected_graph_node_0)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_6.label).__module__}.{type(var_6.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_6.label) == 0
    assert (
        f"{type(var_6.neighbors).__module__}.{type(var_6.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_6.neighbors) == 2
    var_7 = module_0.clone_graph2(var_4)
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_7.label).__module__}.{type(var_7.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_7.label) == 0
    assert (
        f"{type(var_7.neighbors).__module__}.{type(var_7.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_7.neighbors) == 1
    var_8 = var_1.__lt__(var_1)
    var_3.isascii()


@pytest.mark.xfail(strict=True)
def test_case_14():
    set_0 = set()
    items_view_0 = module_1.ItemsView(set_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(items_view_0)
    var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_1 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "clone_graph.UndirectedGraphNode"
    )
    assert (
        f"{type(var_1.label).__module__}.{type(var_1.label).__qualname__}"
        == "collections.abc.ItemsView"
    )
    assert len(var_1.label) == 0
    assert (
        f"{type(var_1.neighbors).__module__}.{type(var_1.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.neighbors) == 1
    var_2 = items_view_0.__len__()
    var_3 = var_1.add_neighbor(undirected_graph_node_0)
    assert len(var_1.neighbors) == 2
    var_4 = module_0.clone_graph2(var_1)
    assert len(var_4.neighbors) == 2
    var_3.__len__()
